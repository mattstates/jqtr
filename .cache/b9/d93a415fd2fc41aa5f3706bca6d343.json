{"id":"node_modules/date-fns/are_ranges_overlapping/index.js","dependencies":[{"name":"/Users/mattstates/Documents/jiraquerytimeremaining/package.json","includedInParent":true,"mtime":1563469179037},{"name":"/Users/mattstates/Documents/jiraquerytimeremaining/.babelrc","includedInParent":true,"mtime":1563469178981},{"name":"/Users/mattstates/Documents/jiraquerytimeremaining/node_modules/date-fns/are_ranges_overlapping/package.json","includedInParent":true,"mtime":1544450746000},{"name":"../parse/index.js","loc":{"line":1,"column":20},"parent":"/Users/mattstates/Documents/jiraquerytimeremaining/node_modules/date-fns/are_ranges_overlapping/index.js","resolved":"/Users/mattstates/Documents/jiraquerytimeremaining/node_modules/date-fns/parse/index.js"}],"generated":{"js":"var parse = require('../parse/index.js')\n\n/**\n * @category Range Helpers\n * @summary Is the given date range overlapping with another date range?\n *\n * @description\n * Is the given date range overlapping with another date range?\n *\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\n * @returns {Boolean} whether the date ranges are overlapping\n * @throws {Error} startDate of a date range cannot be after its endDate\n *\n * @example\n * // For overlapping date ranges:\n * areRangesOverlapping(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping date ranges:\n * areRangesOverlapping(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\n * )\n * //=> false\n */\nfunction areRangesOverlapping (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()\n\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range')\n  }\n\n  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime\n}\n\nmodule.exports = areRangesOverlapping\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/date-fns/are_ranges_overlapping/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}}],"sources":{"node_modules/date-fns/are_ranges_overlapping/index.js":"var parse = require('../parse/index.js')\n\n/**\n * @category Range Helpers\n * @summary Is the given date range overlapping with another date range?\n *\n * @description\n * Is the given date range overlapping with another date range?\n *\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\n * @returns {Boolean} whether the date ranges are overlapping\n * @throws {Error} startDate of a date range cannot be after its endDate\n *\n * @example\n * // For overlapping date ranges:\n * areRangesOverlapping(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping date ranges:\n * areRangesOverlapping(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\n * )\n * //=> false\n */\nfunction areRangesOverlapping (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()\n\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range')\n  }\n\n  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime\n}\n\nmodule.exports = areRangesOverlapping\n"},"lineCount":45}},"error":null,"hash":"c1b8a68ca376ca5842b751496cc4f0df","cacheData":{"env":{}}}